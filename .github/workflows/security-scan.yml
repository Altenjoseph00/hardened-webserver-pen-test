name: Hardened Webserver Security Scan

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  zapscan:
    name: Run ZAP Baseline Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Build Docker app image
      - name: Build app image
        run: docker build -t myapp:test .

      # Step 3: Run app container
      - name: Run app container
        run: |
          docker rm -f myapp || true
          docker run -d --name myapp -p 8080:80 myapp:test
          echo "‚è≥ Waiting for app to start..."
          for i in {1..15}; do
            if curl -sSf http://localhost:8080 >/dev/null 2>&1; then
              echo "‚úÖ App is up and running"
              break
            fi
            echo "Waiting..."; sleep 2
          done

      # Step 4: Fix permissions
      - name: Set ZAP Output Permissions
        run: sudo chmod -R 777 .

      # Step 5: Run OWASP ZAP Baseline Scan
      - name: Run OWASP ZAP Baseline Scan
        id: zap
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: ''
          cmd_options: '-a'
          allow_issue_writing: false
          artifact_name: ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      # Step 6: Collect ZAP reports (directly from workspace)
      - name: Collect ZAP reports
        run: |
          mkdir -p zap_results
          echo "üìÑ Collecting ZAP reports..."
          cp -v *.html zap_results/ || true
          cp -v *.json zap_results/ || true
          echo "‚úÖ Reports moved to zap_results/"
          ls -la zap_results

      # Step 7: Upload ZAP results as GitHub artifact
      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: zap_results/
          retention-days: 7

      # Step 8: Run custom remediation scoring
      - name: Run remediation scoring
        run: |
          echo "Running ZAP remediation scoring..."
          if [ -f zap_results/zap_report.json ]; then
            python3 zap_score_calculator.py zap_results/zap_report.json
          else
            echo "‚ö†Ô∏è zap_report.json not found, skipping scoring."
          fi
