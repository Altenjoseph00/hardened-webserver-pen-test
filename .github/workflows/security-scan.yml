name: Hardened Webserver Security Scan

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # Job ID is correctly hyphenated
  zap-scan: 
    name: Run ZAP Baseline Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Build Docker app image (using your Dockerfile)
      - name: Build app image
        run: docker build -t myapp:test .

      # Step 3: Run app container
      - name: Run app container
        run: |
          # The app runs on port 80 internally, mapped to 8080 on the host
          docker rm -f myapp || true
          docker run -d --name myapp -p 8080:80 myapp:test
          echo "Waiting for app to start..."
          for i in {1..15}; do
            # Check for success on the host port (8080)
            if curl -sSf http://localhost:8080 >/dev/null 2>&1; then
              echo "‚úÖ App is up and running"
              break
            fi
            echo "‚è≥ Waiting for app..."; sleep 2
          done
          
      # Step 4: Set ZAP Output Permissions (Needed for volume mounts)
      - name: Set ZAP Output Permissions
        run: sudo chmod -R 777 . 

      # üõë CRITICAL FIX: Run ZAP Automation Framework via a direct Docker command
      - name: Run ZAP Automation Scan (Direct Docker)
        id: zap
        run: |
          echo "Pulling ZAP image..."
          docker pull ghcr.io/zaproxy/zaproxy:stable -q
          
          echo "Running ZAP Automation Framework with zap_scan.yml..."
          # The ZAP container runs 'zap.sh' which supports the '-autorun' flag
          docker run \
            # Mount current workspace as /zap/wrk/ for ZAP to read zap_scan.yml and write reports
            -v /home/runner/work/hardened-webserver-pen-test/hardened-webserver-pen-test:/zap/wrk/:rw \
            --network=host \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap.sh -autorun /zap/wrk/zap_scan.yml
        # No 'continue-on-error' needed, as this is a pure command execution.

      # Step 5: Set Report Permissions and Run Scoring
      - name: Set Report Permissions and Run Scoring
        if: always() # Run regardless of ZAP scan outcome
        run: |
          # Your zap_scan.yml writes reports to the zap_results/ folder in the workspace.
          
          # Ensure runner user can access files written by the non-root ZAP container user
          sudo chmod -R 777 zap_results || true
          
          # Run custom scoring script
          echo " Running ZAP remediation scoring..."
          # Scoring script uses the zap_report.json defined by your zap_scan.yml
          python3 zap_score_calculator.py zap_results/zap_report.json 
          
      # Step 6: Upload ZAP results as GitHub artifact 
      - name: Upload ZAP Results Manually
        if: always() # Run regardless of previous step success/failure
        uses: actions/upload-artifact@v4
        with:
          name: "zap-reports-final"
          path: "zap_results/"
          retention-days: 7
          
