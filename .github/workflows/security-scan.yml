name: Hardened Webserver Security Scan

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # Job ID is correctly hyphenated (zap-scan)
  zap-scan: 
    name: Run ZAP Baseline Scan
    runs-on: ubuntu-latest

    steps:
      # Steps 1-3 are fine.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build app image
        run: docker build -t myapp:test .

      - name: Run app container
        run: |
          docker rm -f myapp || true
          docker run -d --name myapp -p 8080:80 myapp:test
          echo "Waiting for app to start..."
          for i in {1..15}; do
            if curl -sSf http://localhost:8080 >/dev/null 2>&1; then
              echo "‚úÖ App is up and running"
              break
            fi
            echo "‚è≥ Waiting for app..."; sleep 2
          done
          
      # Permissions Fix (Confirmed working)
      - name: Set ZAP Output Permissions
        run: sudo chmod -R 777 . 

      # üõë CRITICAL FIX: Use the correct, general ZAP action: zaproxy/zap-action
      - name: Run ZAP Automation Scan (using zap_scan.yml)
        id: zap
        # Use the general ZAP action for running automation
        uses: zaproxy/zap-action@v0.11.0 
        with:
          # Use the 'docker_name' parameter to point the ZAP container to the automation file.
          # The path is relative to the workspace, mapped into the container at /zap/wrk/
          docker_name: 'zap-automation-framework -autorun /zap/wrk/zap_scan.yml' 
          # We use this parameter for the artifact name override (the final attempt to fix the original bug)
          artifact_name: 'zap-reports' 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Keep continue-on-error as the final, absolute workaround for the artifact bug
        continue-on-error: true 

      # Step 5: Set Report Permissions and Run Scoring
      - name: Set Report Permissions and Run Scoring
        # Ensures this runs even if Step 4 fails due to the artifact bug
        if: always()
        run: |
          # The zap_scan.yml reports to /zap/wrk/zap_results/zap_report.json 
          # which maps to the runner's workspace: zap_results/zap_report.json
          
          # Ensure permissions are correct on the subdirectory created by the ZAP container
          sudo chmod -R 777 zap_results || true
          
          # Run custom scoring script
          echo " Running ZAP remediation scoring..."
          # The output path is relative to the workspace
          python3 zap_score_calculator.py zap_results/zap_report.json 
          
      # Step 7: Upload ZAP results as GitHub artifact 
      - name: Upload ZAP Results Manually
        if: always() # Runs regardless of previous step success/failure
        uses: actions/upload-artifact@v4
        with:
          name: "zap-reports-manual"
          path: "zap_results/"
          retention-days: 7
