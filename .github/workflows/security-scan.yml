name: Hardened Webserver Security Scan

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # Job ID is correctly hyphenated (zap-scan)
  zap-scan: 
    name: Run ZAP Baseline Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1-3 are fine.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build app image
        run: docker build -t myapp:test .

      - name: Run app container
        run: |
          docker rm -f myapp || true
          docker run -d --name myapp -p 8080:80 myapp:test
          echo "Waiting for app to start..."
          for i in {1..15}; do
            if curl -sSf http://localhost:8080 >/dev/null 2>&1; then
              echo "‚úÖ App is up and running"
              break
            fi
            echo "‚è≥ Waiting for app..."; sleep 2
          done
          
      # Permissions Fix (Needed because the ZAP action mounts the volume)
      - name: Set ZAP Output Permissions
        run: sudo chmod -R 777 . 

      # üõë NEW Step 4: Run ZAP Automation Framework
      - name: Run ZAP Automation Scan (using zap_scan.yml)
        id: zap
        # Use the action designed for the Automation Framework
        uses: zaproxy/action-full-scan@v0.11.0 
        with:
          # Point to your Automation Framework file
          cmd: zap.sh -autorun /zap/wrk/zap_scan.yml
          # Set a valid artifact name here. The action will create the artifact.
          job_name: 'zap-results' 
          # Pass the GITHUB_TOKEN for artifact upload authorization
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # DO NOT use continue-on-error here yet, we want the ZAP scan's failure to stop the job

      # üõë NEW Step 5: (Replaces Step 5 and 6) Wait for ZAP reports and run scoring
      # The ZAP action runs ZAP as non-root, so we need to ensure the report files 
      # generated by the ZAP container are readable/executable by the runner user.
      - name: Set Report Permissions and Run Scoring
        run: |
          # Wait a moment for files to be written completely (optional, but safer)
          sleep 5 
          
          # Set permissions on the output directory created by the ZAP container
          sudo chmod -R 777 zap_results
          
          # Run custom scoring script
          echo " Running ZAP remediation scoring..."
          # Your zap_scan.yml specifies reportFile: "zap_report.html" and reportDir: "/zap/wrk/zap_results"
          # Which maps to zap_results/zap_report.html in the runner workspace
          python3 zap_score_calculator.py zap_results/zap_report.json 
          
      # Step 7: Upload ZAP results as GitHub artifact
      # The ZAP action (with job_name) often creates the artifact itself. 
      # If you still need a separate step, use this one:
      - name: Upload ZAP Results Manually (Fallback/Redundant)
        uses: actions/upload-artifact@v4
        with:
          name: "zap-reports-manual"
          path: "zap_results/"
          retention-days: 7
